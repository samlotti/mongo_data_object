package com.hapticapps.amici.shared.data_models.org;
// Generated by mdo do not edit this file, see the .mdo file 

import com.hapticapps.amici.shared.utils.Utils;
import org.bson.codecs.pojo.annotations.BsonProperty;
import org.bson.codecs.pojo.annotations.BsonProperty;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import com.mongodb.client.model.IndexOptions;
import org.bson.conversions.Bson;
import com.mongodb.BasicDBObject;

public class OrgPerson {
	public static final String BSON_UUID = "u";
	public static final String BSON_ORGID = "o";
	public static final String BSON_NAME = "n";
	public static final String BSON_EMAIL = "e";
	public static final String BSON_STATUS = "st";
	public static final String BSON_FRIENDIDS = "f";
	public static final String BSON_ADDRESSES = "a";

	@BsonProperty("u")
	private String uuid = Utils.newUID();

	@BsonProperty("o")
	private String orgId;

	@BsonProperty("n")
	private String name;

	@BsonProperty("e")
	private String email;

	@BsonProperty("st")
	private Status status = Status.PENDING;

	@BsonProperty("f")
	private List<String> friendIds = new ArrayList<>();

	@BsonProperty("a")
	private List<Address> addresses = new ArrayList<>();


	public String getUuid(){
		return uuid;
	}
	public void setUuid(String data){
		this.uuid = data;
	}
	public String getOrgId(){
		return orgId;
	}
	public void setOrgId(String data){
		this.orgId = data;
	}
	public String getName(){
		return name;
	}
	public void setName(String data){
		this.name = data;
	}
	public String getEmail(){
		return email;
	}
	public void setEmail(String data){
		this.email = data;
	}
	public Status getStatus(){
		return status;
	}
	public void setStatus(Status data){
		this.status = data;
	}
	public List<String> getFriendIds(){
		return friendIds;
	}
	public void setFriendIds(List<String> data){
		this.friendIds = data;
	}
	public List<Address> getAddresses(){
		return addresses;
	}
	public void setAddresses(List<Address> data){
		this.addresses = data;
	}

	public OrgPersonBuilder copy() {
		return OrgPersonBuilder.from( this );
	}

	public static OrgPersonBuilder builder() {
		return new OrgPersonBuilder();
	}
	public String toString() {
		return "OrgPerson{" + 
		"}";
	}

	public static class OrgPersonBuilder {

		private String uuid = Utils.newUID();

		private String orgId;

		private String name;

		private String email;

		private Status status = Status.PENDING;

		private List<String> friendIds = new ArrayList<>();

		private List<Address> addresses = new ArrayList<>();

		public static OrgPersonBuilder from(OrgPerson source) {
			var r = new OrgPersonBuilder();
			r.uuid = source.getUuid();
			r.orgId = source.getOrgId();
			r.name = source.getName();
			r.email = source.getEmail();
			r.status = source.getStatus();
			r.friendIds = source.getFriendIds();
			r.addresses = source.getAddresses();
			return r;
		}

		public OrgPersonBuilder setUuid(String uuid) {
			this.uuid = uuid;
			return this;
		}

		public OrgPersonBuilder setOrgId(String orgId) {
			this.orgId = orgId;
			return this;
		}

		public OrgPersonBuilder setName(String name) {
			this.name = name;
			return this;
		}

		public OrgPersonBuilder setEmail(String email) {
			this.email = email;
			return this;
		}

		public OrgPersonBuilder setStatus(Status status) {
			this.status = status;
			return this;
		}

		public OrgPersonBuilder setFriendIds(List<String> friendIds) {
			this.friendIds = friendIds;
			return this;
		}

		public OrgPersonBuilder setAddresses(List<Address> addresses) {
			this.addresses = addresses;
			return this;
		}

		public OrgPerson build() {
			var r = new OrgPerson();
			r.uuid = uuid;
			r.orgId = orgId;
			r.name = name;
			r.email = email;
			r.status = status;
			r.friendIds = friendIds;
			r.addresses = addresses;
			return r;
		}
	}
	public static class Address {
		public static final String BSON_CITY = "ct";
		public static final String BSON_STATE = "st";
		public static final String BSON_ZIP = "zip";
		public static final String BSON_ADDRESSTYPE = "at";

		@BsonProperty("ct")
		private String city;

		@BsonProperty("st")
		private String state;

		private String zip;

		@BsonProperty("at")
		private AddressType addressType;


		public String getCity(){
			return city;
		}
		public void setCity(String data){
			this.city = data;
		}
		public String getState(){
			return state;
		}
		public void setState(String data){
			this.state = data;
		}
		public String getZip(){
			return zip;
		}
		public void setZip(String data){
			this.zip = data;
		}
		public AddressType getAddressType(){
			return addressType;
		}
		public void setAddressType(AddressType data){
			this.addressType = data;
		}

		public AddressBuilder copy() {
			return AddressBuilder.from( this );
		}

		public static AddressBuilder builder() {
			return new AddressBuilder();
		}
		public String toString() {
			return "Address{" + 
			"}";
		}

		public static class AddressBuilder {

			private String city;

			private String state;

			private String zip;

			private AddressType addressType;

			public static AddressBuilder from(Address source) {
				var r = new AddressBuilder();
				r.city = source.getCity();
				r.state = source.getState();
				r.zip = source.getZip();
				r.addressType = source.getAddressType();
				return r;
			}

			public AddressBuilder setCity(String city) {
				this.city = city;
				return this;
			}

			public AddressBuilder setState(String state) {
				this.state = state;
				return this;
			}

			public AddressBuilder setZip(String zip) {
				this.zip = zip;
				return this;
			}

			public AddressBuilder setAddressType(AddressType addressType) {
				this.addressType = addressType;
				return this;
			}

			public Address build() {
				var r = new Address();
				r.city = city;
				r.state = state;
				r.zip = zip;
				r.addressType = addressType;
				return r;
			}
		}
	}

	public enum Status {
		PENDING,
		ACTIVE,
		UNREGISTERED
	}

	public enum AddressType {
		PRIMARY,
		SECONDARY
	}
	public static class Indexes {
		public static List<Bson> ikeys = new ArrayList<>();
		public static List<IndexOptions> ioptions = new ArrayList<>();
		static {
			ikeys.add(new BasicDBObject( Map.of(
				OrgPerson.BSON_UUID, 1
			)));
			ioptions.add(new IndexOptions().unique(true));
			ikeys.add(new BasicDBObject( Map.of(
				OrgPerson.BSON_NAME, 1
			)));
			ioptions.add(new IndexOptions().unique(true));
			ikeys.add(new BasicDBObject( Map.of(
				OrgPerson.BSON_EMAIL, 1
			)));
			ioptions.add(new IndexOptions().unique(true).sparse(true));
			ikeys.add(new BasicDBObject( Map.of(
				OrgPerson.BSON_FRIENDIDS, 1
			)));
			ioptions.add(new IndexOptions().sparse(true));
		}
	}
}

